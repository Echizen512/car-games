{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/Finance.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract Finance is Ownable {\r\n    IERC20 public ronKeToken;\r\n\r\n    bytes32 public constant COMMON = \"COMMON\";\r\n    bytes32 public constant UNCOMMON = \"UNCOMMON\";\r\n    bytes32 public constant RARE = \"RARE\";\r\n    bytes32 public constant EPIC = \"EPIC\";\r\n\r\n    mapping(uint256 => uint256) public oilBalances;\r\n    mapping(uint256 => address) public nftOwner;\r\n    mapping(address => mapping(uint256 => Reward)) public rewards;\r\n    mapping(address => uint256) public rewardCount;\r\n    mapping(uint256 => Reward[]) public nftRewards;\r\n\r\n    uint256 public maxId;\r\n\r\n    //events\r\n    event RaceStarted(address indexed player, uint256 nftId);\r\n    event RewardGiven(address indexed player, uint256 amount);\r\n    event Withdrawal(address indexed player, uint256 amount, uint256 penalty);\r\n\r\n    struct Reward {\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n        bool withdrawn;\r\n    }\r\n\r\n    //constructor\r\n    constructor(address owner, address _ronKeToken) Ownable(owner) {\r\n        ronKeToken = IERC20(_ronKeToken);\r\n    }\r\n\r\n    function setDefaultOil(uint256 _nftID, bytes32 _rarity) private {\r\n        require(_rarity == COMMON || _rarity == UNCOMMON || _rarity == RARE || _rarity == EPIC, \"Wrong rarity\");\r\n\r\n        if (_rarity == COMMON) {\r\n            oilBalances[_nftID] = 30;\r\n        }\r\n        if (_rarity == UNCOMMON) {\r\n            oilBalances[_nftID] = 45;\r\n        }\r\n        if (_rarity == RARE) {\r\n            oilBalances[_nftID] = 60;\r\n        }\r\n        if (_rarity == EPIC) {\r\n            oilBalances[_nftID] = 75;\r\n        }\r\n    }\r\n\r\n    function raceStart(uint256 _nftID, bytes32 _rarity) public {\r\n        address player = msg.sender;\r\n        if (nftOwner[_nftID] == address(0)) {\r\n            setDefaultOil(_nftID, _rarity);\r\n            nftOwner[_nftID] = player;\r\n            oilBalances[_nftID] -= 15;\r\n            maxId++;\r\n        } else {\r\n            nftOwner[_nftID] = player;\r\n            uint256 currentOil = oilBalances[_nftID];\r\n            require(currentOil > 0, \"Not enough oil\");\r\n            oilBalances[_nftID] -= 15;\r\n        }\r\n        emit RaceStarted(player, _nftID);\r\n    }\r\n\r\n    function resetAllNftOwners() public onlyOwner {\r\n        for (uint256 i = 0; i < maxId; i++) {\r\n            delete nftOwner[i];\r\n        }\r\n    }\r\n\r\n    function grantReward(address player, uint256 _nftID, uint8 _position) external onlyOwner {\r\n        uint256 rewardAmount;\r\n\r\n        if (_position == 1) {\r\n            rewardAmount = 8 * 10 ** 18;\r\n        } else if (_position == 2) {\r\n            rewardAmount = 5 * 10 ** 18;\r\n        } else if (_position == 3) {\r\n            rewardAmount = 3 * 10 ** 18;\r\n        } else {\r\n            rewardAmount = 0;\r\n        }\r\n\r\n        require(rewardAmount > 0, \"No reward for this position\");\r\n        require(ronKeToken.balanceOf(address(this)) >= rewardAmount, \"Insufficient funds in contract\");\r\n\r\n        uint256 index = rewardCount[player];\r\n        rewards[player][index] = Reward(rewardAmount, block.timestamp, false);\r\n        rewardCount[player]++;\r\n\r\n        nftRewards[_nftID].push(Reward(rewardAmount, block.timestamp, false));\r\n\r\n        ronKeToken.transfer(player, rewardAmount);\r\n        emit RewardGiven(player, rewardAmount);\r\n    }\r\n\r\n    function withdrawEarnings(uint256 _nftID) external {\r\n        require(nftOwner[_nftID] == msg.sender, \"You do not own this NFT\");\r\n\r\n        Reward[] storage nftRewardList = nftRewards[_nftID];\r\n        uint256 totalAmount = 0;\r\n        uint256 penalty = 0;\r\n        uint256 currentTime = block.timestamp;\r\n\r\n        for (uint256 i = 0; i < nftRewardList.length; i++) {\r\n            if (nftRewardList[i].withdrawn) continue;\r\n\r\n            uint256 timeElapsed = currentTime - nftRewardList[i].timestamp;\r\n            uint256 amount = nftRewardList[i].amount;\r\n\r\n            if (timeElapsed < 24 hours) penalty += (amount * 50) / 100;\r\n            else if (timeElapsed < 48 hours) penalty += (amount * 30) / 100;\r\n            else if (timeElapsed < 72 hours) penalty += (amount * 20) / 100;\r\n\r\n            totalAmount += amount;\r\n            nftRewardList[i].withdrawn = true;\r\n        }\r\n\r\n        require(totalAmount > 0, \"No earnings available for withdrawal\");\r\n        uint256 finalAmount = totalAmount - penalty;\r\n\r\n        ronKeToken.transfer(owner(), penalty);\r\n        ronKeToken.transfer(msg.sender, finalAmount);\r\n\r\n        emit Withdrawal(msg.sender, finalAmount, penalty);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}